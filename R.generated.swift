// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Gotham-Black.otf`.
    static let gothamBlackOtf = FileResource(bundle: _R.hostingBundle, name: "Gotham-Black", pathExtension: "otf")
    /// Resource file `Gotham-Book.otf`.
    static let gothamBookOtf = FileResource(bundle: _R.hostingBundle, name: "Gotham-Book", pathExtension: "otf")
    /// Resource file `Gotham-Medium.otf`.
    static let gothamMediumOtf = FileResource(bundle: _R.hostingBundle, name: "Gotham-Medium", pathExtension: "otf")
    /// Resource file `Lora-Regular.ttf`.
    static let loraRegularTtf = FileResource(bundle: _R.hostingBundle, name: "Lora-Regular", pathExtension: "ttf")
    
    /// `bundle.URLForResource("Gotham-Black", withExtension: "otf")`
    static func gothamBlackOtf(_: Void) -> NSURL? {
      let fileResource = R.file.gothamBlackOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Gotham-Book", withExtension: "otf")`
    static func gothamBookOtf(_: Void) -> NSURL? {
      let fileResource = R.file.gothamBookOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Gotham-Medium", withExtension: "otf")`
    static func gothamMediumOtf(_: Void) -> NSURL? {
      let fileResource = R.file.gothamMediumOtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("Lora-Regular", withExtension: "ttf")`
    static func loraRegularTtf(_: Void) -> NSURL? {
      let fileResource = R.file.loraRegularTtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font {
    /// Font `Gotham-Black`.
    static let gothamBlack = FontResource(fontName: "Gotham-Black")
    /// Font `Gotham-Book`.
    static let gothamBook = FontResource(fontName: "Gotham-Book")
    /// Font `Gotham-Medium`.
    static let gothamMedium = FontResource(fontName: "Gotham-Medium")
    /// Font `Lora-Regular`.
    static let loraRegular = FontResource(fontName: "Lora-Regular")
    
    /// `UIFont(name: "Gotham-Black", size: ...)`
    static func gothamBlack(size size: CGFloat) -> UIFont? {
      return UIFont(resource: gothamBlack, size: size)
    }
    
    /// `UIFont(name: "Gotham-Book", size: ...)`
    static func gothamBook(size size: CGFloat) -> UIFont? {
      return UIFont(resource: gothamBook, size: size)
    }
    
    /// `UIFont(name: "Gotham-Medium", size: ...)`
    static func gothamMedium(size size: CGFloat) -> UIFont? {
      return UIFont(resource: gothamMedium, size: size)
    }
    
    /// `UIFont(name: "Lora-Regular", size: ...)`
    static func loraRegular(size size: CGFloat) -> UIFont? {
      return UIFont(resource: loraRegular, size: size)
    }
    
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `tab-faq`.
    static let tabFaq = ImageResource(bundle: _R.hostingBundle, name: "tab-faq")
    /// Image `tab-faq-filled`.
    static let tabFaqFilled = ImageResource(bundle: _R.hostingBundle, name: "tab-faq-filled")
    /// Image `tab-resources`.
    static let tabResources = ImageResource(bundle: _R.hostingBundle, name: "tab-resources")
    /// Image `tab-resources-filled`.
    static let tabResourcesFilled = ImageResource(bundle: _R.hostingBundle, name: "tab-resources-filled")
    /// Image `tab-schedule`.
    static let tabSchedule = ImageResource(bundle: _R.hostingBundle, name: "tab-schedule")
    /// Image `tab-schedule-filled`.
    static let tabScheduleFilled = ImageResource(bundle: _R.hostingBundle, name: "tab-schedule-filled")
    
    /// `UIImage(named: "tab-faq", bundle: ..., traitCollection: ...)`
    static func tabFaq(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabFaq, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "tab-faq-filled", bundle: ..., traitCollection: ...)`
    static func tabFaqFilled(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabFaqFilled, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "tab-resources", bundle: ..., traitCollection: ...)`
    static func tabResources(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabResources, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "tab-resources-filled", bundle: ..., traitCollection: ...)`
    static func tabResourcesFilled(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabResourcesFilled, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "tab-schedule", bundle: ..., traitCollection: ...)`
    static func tabSchedule(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabSchedule, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "tab-schedule-filled", bundle: ..., traitCollection: ...)`
    static func tabScheduleFilled(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tabScheduleFilled, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `FAQCell`.
    static let fAQCell: ReuseIdentifier<FAQCell> = ReuseIdentifier(identifier: "FAQCell")
    /// Reuse identifier `ScheduleCell`.
    static let scheduleCell: ReuseIdentifier<UITableViewCell> = ReuseIdentifier(identifier: "ScheduleCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `FAQ`.
    static let fAQ = _R.storyboard.fAQ()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Resources`.
    static let resources = _R.storyboard.resources()
    /// Storyboard `Schedule`.
    static let schedule = _R.storyboard.schedule()
    
    /// `UIStoryboard(name: "FAQ", bundle: ...)`
    static func fAQ(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.fAQ)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Resources", bundle: ...)`
    static func resources(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.resources)
    }
    
    /// `UIStoryboard(name: "Schedule", bundle: ...)`
    static func schedule(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.schedule)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.kylebashour.VolHacks") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try fAQ.validate()
      try resources.validate()
      try schedule.validate()
    }
    
    struct fAQ: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "FAQ"
      
      static func validate() throws {
        if UIImage(named: "tab-faq") == nil { throw ValidationError(description: "[R.swift] Image named 'tab-faq' is used in storyboard 'FAQ', but couldn't be loaded.") }
        if UIImage(named: "tab-faq-filled") == nil { throw ValidationError(description: "[R.swift] Image named 'tab-faq-filled' is used in storyboard 'FAQ', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UITabBarController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      private init() {}
    }
    
    struct resources: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Resources"
      
      static func validate() throws {
        if UIImage(named: "tab-resources-filled") == nil { throw ValidationError(description: "[R.swift] Image named 'tab-resources-filled' is used in storyboard 'Resources', but couldn't be loaded.") }
        if UIImage(named: "tab-resources") == nil { throw ValidationError(description: "[R.swift] Image named 'tab-resources' is used in storyboard 'Resources', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct schedule: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UINavigationController
      
      let bundle = _R.hostingBundle
      let name = "Schedule"
      
      static func validate() throws {
        if UIImage(named: "tab-schedule") == nil { throw ValidationError(description: "[R.swift] Image named 'tab-schedule' is used in storyboard 'Schedule', but couldn't be loaded.") }
        if UIImage(named: "tab-schedule-filled") == nil { throw ValidationError(description: "[R.swift] Image named 'tab-schedule-filled' is used in storyboard 'Schedule', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}